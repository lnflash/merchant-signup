name: Build and Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      IS_BUILD_TIME: "true"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run environment checks
      run: |
        node scripts/check-env.js
        npm run env-debug
      
    - name: Build Next.js app (static export)
      run: |
        # Log environment variables (without showing values)
        npm run check-build-env
        
        # Build the app with static export mode (using output: 'export' in next.config.js)
        # IS_BUILD_TIME=true activates the output: 'export' setting
        echo "Building Next.js app with static export mode..."
        npm run build
        
        # Create API route fallbacks for static export
        echo "Adding API fallbacks to static output..."
        mkdir -p out/api/credentials
        
        # Create credentials fallback JSON
        cat > out/api/credentials/index.json << EOF
        {
          "supabaseUrl": "$NEXT_PUBLIC_SUPABASE_URL",
          "supabaseKey": "$NEXT_PUBLIC_SUPABASE_ANON_KEY",
          "bucket": "id_uploads",
          "environment": "production",
          "buildTime": true,
          "platform": "StaticBuild",
          "traceId": "static_build_$(date +%s)",
          "serverTime": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        }
        EOF
        
        # Enhanced env-config.js to ensure credentials are available client-side
        echo "Creating enhanced env-config.js..."
        cat > out/env-config.js << EOF
        // Static build environment configuration
        window.ENV = {
          SUPABASE_URL: "$NEXT_PUBLIC_SUPABASE_URL",
          SUPABASE_KEY: "$NEXT_PUBLIC_SUPABASE_ANON_KEY",
          BUILD_TIME: true,
          BUILD_DATE: "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          PLATFORM: "GithubStaticDeploy",
          DEPLOY_ID: "$GITHUB_RUN_ID"
        };
        
        // Log that the environment variables have been loaded from the static build
        console.log('Static build environment variables loaded:', {
          hasUrl: !!window.ENV.SUPABASE_URL,
          hasKey: !!window.ENV.SUPABASE_KEY,
          buildTime: window.ENV.BUILD_TIME,
          buildDate: window.ENV.BUILD_DATE
        });
        EOF
        
    - name: List built files
      run: |
        echo "Static export structure:"
        ls -la out/ || echo "No 'out' directory found"
        
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: Verify static output
      run: |
        echo "Verifying static export content..."
        ls -la out/
        if [ -f "out/index.html" ]; then
          echo "✅ index.html exists"
        else
          echo "❌ index.html is missing!"
          exit 1
        fi
        # Check if form directory exists, but don't fail if it's missing
        # (it might be in a different structure depending on Next.js export format)
        if [ -f "out/form/index.html" ]; then
          echo "✅ form/index.html exists"
        elif [ -f "out/form.html" ]; then
          echo "✅ form.html exists"
        else
          echo "⚠️ form page not found in expected locations, but continuing anyway"
        fi
        
        # Check for env-config.js and API fallbacks
        if [ -f "out/env-config.js" ]; then
          echo "✅ env-config.js exists"
        else
          echo "❌ env-config.js is missing!" 
          exit 1
        fi
        
        if [ -f "out/api/credentials/index.json" ]; then
          echo "✅ API credentials fallback exists"
        else
          echo "❌ API credentials fallback is missing!"
          exit 1
        fi
        
        echo "✅ Static export verification complete"
        
    - name: Upload static build to GitHub Pages branch
      run: |
        # Setup git user
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Check if the gh-pages branch exists remotely
        if git ls-remote --heads origin gh-pages | grep -q 'gh-pages'; then
          echo "gh-pages branch exists, fetching it..."
          git fetch origin gh-pages
        fi
        
        # Create a new orphan branch for GitHub Pages
        echo "Creating GitHub Pages branch with static output..."
        git checkout --orphan gh-pages-new
        
        # Clear the working directory
        git rm -rf .
        
        # Create necessary directories
        echo "Creating directory structure..."
        mkdir -p form _next/static/css _next/static/media _next/static/chunks images/logos public api/credentials
        
        # Copy from the out directory using find to exclude node_modules
        echo "Copying static files and excluding large files..."
        if [ -f "out/index.html" ]; then
          cp out/index.html ./index.html
        else
          echo "⚠️ Warning: index.html not found in out directory"
        fi
        
        if [ -f "out/404.html" ]; then
          cp out/404.html ./404.html
        else
          echo "⚠️ Warning: 404.html not found in out directory"
        fi
        
        if [ -f "out/env-config.js" ]; then
          cp out/env-config.js ./env-config.js
        else
          echo "⚠️ Warning: env-config.js not found in out directory"
        fi
        
        # Copy API fallbacks
        if [ -f "out/api/credentials/index.json" ]; then
          cp out/api/credentials/index.json ./api/credentials/index.json
        else
          echo "⚠️ Warning: API credentials fallback not found"
        fi
        
        # Copy the form directory content
        if [ -d "out/form" ]; then
          cp -r out/form/* ./form/ 2>/dev/null || echo "⚠️ Warning: Error copying form directory, but continuing..."
        else
          echo "⚠️ Warning: form directory not found in out directory"
        fi
        
        # Copy images if available
        if [ -d "out/images" ]; then
          cp -r out/images/* ./images/ 2>/dev/null || echo "⚠️ Warning: Error copying images, but continuing..."
        else
          echo "⚠️ Warning: images directory not found in out directory"
        fi
        
        # Copy public if available, but don't fail if missing
        if [ -d "out/public" ]; then
          mkdir -p public
          cp -r out/public/* ./public/ 2>/dev/null || echo "⚠️ Warning: Error copying public directory, but continuing..."
        else
          echo "⚠️ Warning: public directory not found in out directory, skipping..."
        fi
        
        # Copy Next.js files if they exist
        if [ -d "out/_next" ]; then
          cp -r out/_next ./ 2>/dev/null || echo "⚠️ Warning: Error copying _next directory, but continuing..."
        else
          echo "⚠️ Warning: _next directory not found in out directory"
        fi
        
        # Make sure we have a .nojekyll file to prevent GitHub Pages from trying to process the site with Jekyll
        touch .nojekyll
        
        # Create a .gitignore file to avoid including node_modules and other large files
        echo "# Dependencies" > .gitignore
        echo "node_modules" >> .gitignore
        echo ".pnp" >> .gitignore
        echo ".pnp.js" >> .gitignore
        echo "" >> .gitignore
        echo "# Testing" >> .gitignore
        echo "coverage" >> .gitignore
        echo "" >> .gitignore
        echo "# Next.js build artifacts" >> .gitignore
        echo ".next" >> .gitignore
        echo ".next-static" >> .gitignore
        echo "" >> .gitignore
        echo "# Vercel" >> .gitignore
        echo ".vercel" >> .gitignore
        echo "" >> .gitignore
        echo "# Build directory" >> .gitignore
        echo "build" >> .gitignore
        echo "" >> .gitignore
        echo "# Debug logs" >> .gitignore
        echo "npm-debug.log*" >> .gitignore
        echo "yarn-debug.log*" >> .gitignore
        echo "yarn-error.log*" >> .gitignore
        echo "" >> .gitignore
        echo "# Local environment variables" >> .gitignore
        echo ".env*.local" >> .gitignore
        echo "" >> .gitignore
        echo "# Large binary files" >> .gitignore
        echo "*.node" >> .gitignore
        echo "*.so" >> .gitignore
        echo "*.dll" >> .gitignore
        echo "*.dylib" >> .gitignore
        echo "*.exe" >> .gitignore
        
        # Add README.md to explain this branch
        echo "# Flash Merchant Signup - Static Build" > README.md
        echo "" >> README.md
        echo "This branch contains the static build of the Flash Merchant Signup application." >> README.md
        echo "It is generated automatically by GitHub Actions and is intended to be deployed to DigitalOcean App Platform." >> README.md
        echo "" >> README.md
        echo "The source code is in the \`main\` branch." >> README.md
        echo "" >> README.md
        echo "## Build Information" >> README.md
        echo "- Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> README.md
        echo "- Build Commit: $GITHUB_SHA" >> README.md
        
        # Check for any large files before committing
        echo "Checking for large files (>50MB)..."
        find . -type f -size +50M | while read file; do
          echo "⚠️ WARNING: Large file detected: $file"
          rm -f "$file"
          echo "Removed large file to prevent push failure"
        done
        
        # Add and commit the static files
        git add .
        git commit -m "Deploy static site to GitHub Pages ($(date -u +"%Y-%m-%d %H:%M:%S UTC"))"
        
        # Force push to the gh-pages branch
        echo "Pushing to gh-pages branch..."
        git push -f origin gh-pages-new:gh-pages
        
        # Go back to main branch
        git checkout main
        
        echo "✅ Deployed to GitHub Pages!"
        echo "The gh-pages branch now contains the latest static build"
        echo "To make this work with DigitalOcean, configure your app to deploy from the gh-pages branch"